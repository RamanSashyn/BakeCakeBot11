from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from django.db.models import QuerySet
from bot.models import StandardCake, CustomCake
from asgiref.sync import sync_to_async


def get_consent_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è –∏ –æ—Ç–∫–∞–∑–∞."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="‚ùå–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
        ],
        resize_keyboard=True,
    )
    return keyboard


def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ (InlineKeyboard)."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÇ–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç", callback_data="order_cake"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí∞–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä—Ç–æ–≤",
                    callback_data="view_prices",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üì¨–£–∑–Ω–∞—Ç—å —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time"
                )
            ],
        ]
    )


def get_order_menu():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ —Ç–æ—Ä—Ç–∞."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üéÇ–ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç", callback_data="order_ready_cake"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé®–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç", callback_data="order_custom_cake"
                )
            ],
        ]
    )


@sync_to_async
def get_cakes_from_db():
    try:
        return list(StandardCake.objects.all())
    except Exception as e:
        print(f"Error: {e}")
        return []


async def get_ready_cakes_menu():
    """–ú–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –≥–æ—Ç–æ–≤—ã—Ö —Ç–æ—Ä—Ç–æ–≤."""
    cakes = await get_cakes_from_db()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    inline_buttons = []

    for cake in cakes:
        button_text = f"üç∞ {cake.name} - {cake.price} —Ä—É–±."
        callback_data = (
            f"cake_{cake.id}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–æ—Ä—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ callback_data
        )
        inline_buttons.append(
            InlineKeyboardButton(text=button_text, callback_data=callback_data)
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    row_width = 2
    rows = [
        inline_buttons[i : i + row_width]
        for i in range(0, len(inline_buttons), row_width)
    ]

    return InlineKeyboardMarkup(inline_keyboard=rows)


@sync_to_async
def get_all_custom_cakes():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—Ä—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        return list(CustomCake.objects.all())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–æ—Ä—Ç–æ–≤: {e}")
        return []


def get_level_keyboard():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–∑ LEVEL_CHOICES
    level_choices = dict(CustomCake.LEVEL_CHOICES)

    buttons = [
        [InlineKeyboardButton(text=level_text, callback_data=f"level_{level_value}")]
        for level_value, level_text in level_choices.items()
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return keyboard


def get_shape_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã —Ç–æ—Ä—Ç–∞"""
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–∞—à CustomCake –∏–º–µ–µ—Ç –ø–æ–ª–µ SHAPE_CHOICES, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ñ–æ—Ä–º—ã
    shape_choices = dict(CustomCake.SHAPE_CHOICES)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text=shape_text, callback_data=f"shape_{shape_value}")]
        for shape_value, shape_text in shape_choices.items()
    ]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_topping_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–ø–∏–Ω–≥–∞ —Ç–æ—Ä—Ç–∞"""
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–∞—à CustomCake –∏–º–µ–µ—Ç –ø–æ–ª–µ TOPPING_CHOICES, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ø–ø–∏–Ω–≥–∏
    topping_choices = dict(CustomCake.TOPPING_CHOICES)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        [
            InlineKeyboardButton(
                text=topping_text, callback_data=f"topping_{topping_value}"
            )
        ]
        for topping_value, topping_text in topping_choices.items()
    ]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_berries_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–≥–æ–¥"""
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–∞—à CustomCake –∏–º–µ–µ—Ç –ø–æ–ª–µ BERRY_CHOICES, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —è–≥–æ–¥—ã
    berry_choices = dict(CustomCake.BERRY_CHOICES)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text=berry_text, callback_data=f"berry_{berry_value}")]
        for berry_value, berry_text in berry_choices.items()
    ]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_decor_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–∫–æ—Ä–∞"""
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤–∞—à CustomCake –∏–º–µ–µ—Ç –ø–æ–ª–µ DECOR_CHOICES, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–µ–∫–æ—Ä—ã
    decor_choices = dict(CustomCake.DECOR_CHOICES)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text=decor_text, callback_data=f"decor_{decor_value}")]
        for decor_value, decor_text in decor_choices.items()
    ]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard
