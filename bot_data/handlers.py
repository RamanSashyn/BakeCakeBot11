from aiogram import Router, F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from bot.models import (
    DeliveryState,
    CustomCakeState,
    StandardCake,
    CakeOrder,
    CustomCake,
    CustomCakeOrder,
)
from asgiref.sync import sync_to_async
from aiogram import Bot, types
from config import ADMIN_GROUP_ID
from bot_data.keyboards import (
    get_consent_keyboard,
    get_main_menu,
    get_order_menu,
    get_ready_cakes_menu,
    get_level_keyboard,
    get_shape_keyboard,
    get_topping_keyboard,
    get_berries_keyboard,
    get_decor_keyboard,
)
from bot_data.notifications import send_order_notification

router = Router()


@router.message(Command("get_group_id"))
async def get_group_id(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –≥—Ä—É–ø–ø—ã"""
    if message.chat.type in ["group", "supergroup"]:
        await message.answer(
            f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown"
        )
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")


async def send_admin_notification(bot: Bot, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    await bot.send_message(ADMIN_GROUP_ID, text)


@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è."""
    user_name = (
        message.from_user.username
        if message.from_user.username
        else message.from_user.first_name
    )
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! BakeCake –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    consent_file = FSInputFile("files/soglasie.pdf")
    await message.answer(text, reply_markup=get_consent_keyboard())
    await message.answer_document(consent_file)


@router.message(
    lambda message: message.text == "‚úÖ–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
)
async def agree_handler(message: types.Message):
    await message.answer(
        "–í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=get_main_menu()
    )


@router.message(
    lambda message: message.text == "‚ùå–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
)
async def disagree_handler(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    await message.answer(
        "–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—Éüòî.",
        reply_markup=types.ReplyKeyboardRemove(),
    )


@router.callback_query(F.data == "order_cake")
async def order_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ—Ä—Ç' –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∑–∞–∫–∞–∑–∞."""
    await callback.message.answer(
        "–ö–∞–∫–æ–π —Ç–æ—Ä—Ç —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=get_order_menu()
    )


@sync_to_async
def get_all_cakes():
    try:
        return list(StandardCake.objects.all())
    except Exception as e:
        print(f"Error: {e}")
        return []


@router.callback_query(F.data == "view_prices")
async def view_prices_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã'."""
    cakes = await get_all_cakes()
    price_list = "–í–æ—Ç –Ω–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:\n"

    for index, cake in enumerate(cakes, start=1):
        price_list += (
            f"{index}. {cake.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {cake.description}\n"
            f"–¶–µ–Ω–∞: {cake.price} —Ä—É–±.\n\n"
        )
    await callback.message.answer(price_list)


@router.callback_query(F.data == "delivery_time")
async def delivery_time_callback(callback: CallbackQuery):
    """–í—ã–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–µ–∫—É—â–∞—è + 2 –¥–Ω—è)."""
    delivery_date = (datetime.now() + timedelta(days=2)).strftime("%d.%m.%Y")
    await callback.message.answer(f"üì¶ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}")


@router.callback_query(F.data == "order_ready_cake")
async def order_ready_cake_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç' –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä—Ç–æ–≤."""

    reply_markup = await get_ready_cakes_menu()

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö —Ç–æ—Ä—Ç–æ–≤:", reply_markup=reply_markup
    )


@sync_to_async
def get_cake_by_id(cake_id):
    try:
        return StandardCake.objects.get(id=cake_id)
    except StandardCake.DoesNotExist:
        return None


@router.callback_query(F.data.startswith("cake_"))
async def ready_cake_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–æ—Ä—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–¥–ø–∏—Å–∏."""

    cake_id = callback.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ—Ä—Ç–∞ –∏–∑ callback_data
    selected_cake = await get_cake_by_id(cake_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

    if selected_cake:
        await state.update_data(
            selected_cake=f"–¢–æ—Ä—Ç '{selected_cake.name}' - {selected_cake.price} —Ä—É–±."
        )
        await callback.message.answer(
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç *{selected_cake.name}*.",
            parse_mode="Markdown",
        )

        await callback.message.answer(
            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞ —Ç–æ—Ä—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ –Ω–∞–¥–ø–∏—Å–∏)."
        )

        await state.update_data(selected_cake_id=cake_id)

        await state.set_state(CustomCakeState.waiting_for_text)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ—Ä—Ç.")

    await callback.answer()


@router.callback_query(F.data == "start_delivery")
async def start_delivery(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."""
    await callback.message.answer("üìç–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(DeliveryState.waiting_for_address)


@router.message(DeliveryState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    await state.update_data(address=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'."
    )
    await state.set_state(DeliveryState.waiting_for_comment)


@router.callback_query(F.data == "order_custom_cake")
async def order_custom_cake_callback(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä—Ç–∞ –∏ –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è"""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä—Ç–∞:", reply_markup=get_level_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("level_"))
async def level_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Ç–æ—Ä—Ç–∞"""
    level = int(callback.data.split("_")[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —á–∏—Å–ª–æ

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è
    level_name = dict(CustomCake.LEVEL_CHOICES).get(level, f"{level} —É—Ä–æ–≤–µ–Ω—å")

    await state.update_data(level=level)
    print(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {level}")

    await state.set_state(CustomCakeState.waiting_for_shape)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {level_name}. üéÇ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_shape_keyboard(),
    )
    await callback.answer()


# –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sync_to_async
@sync_to_async
def save_cake_order(cake_order):
    cake_order.save()


# –≠—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sync_to_async
@sync_to_async
def save_custom_cake(custom_cake):
    custom_cake.save()


@router.message(DeliveryState.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    user_data = await state.get_data()
    levels_str = user_data.get("level")  # –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        levels = int(levels_str) if levels_str else 1  # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int
    except ValueError:
        levels = 1
    address = user_data.get("address")
    comment = message.text
    selected_cake_id = user_data.get("selected_cake_id")
    cake_text = user_data.get("cake_text", None)

    if selected_cake_id:
        # –ò—â–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        selected_cake = await get_cake_by_id(selected_cake_id)
        if not selected_cake:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        final_price = selected_cake.price
        cake_name = selected_cake.name

        if cake_text and cake_text.lower() != "–Ω–µ—Ç":
            final_price += 500
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
        cake_order = CakeOrder(
            cake=selected_cake,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ç–æ—Ä—Ç
            cake_text=cake_text,
            address=address,
            comment=comment,
            price=final_price,
            telegram_id=message.from_user.username,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ sync_to_async
        await save_cake_order(cake_order)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
        await send_order_notification(
            bot, message.from_user, cake_name, address, comment, cake_text
        )

        await message.answer(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {cake_name}\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {'–¢–µ–∫—Å—Ç –Ω–∞ —Ç–æ—Ä—Ç–µ: ' + cake_text if cake_text else '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏'}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {comment}\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price} —Ä—É–±.\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üéÇ"
        )
    else:
        # –°–æ–∑–¥–∞—ë–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç
        selected_cake = CustomCake(
            levels=levels,
            shape=user_data.get("shape", "round"),
            topping=user_data.get("topping", "none"),
            berries=user_data.get("berry", "none"),
            decor=user_data.get("decor", "none"),
            cake_text=cake_text,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç —á–µ—Ä–µ–∑ sync_to_async
        await save_custom_cake(selected_cake)

        cake_price = selected_cake.calculate_price()
        cake_name = "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç"

        # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
        custom_cake_order = CustomCakeOrder(
            custom_cake=selected_cake,
            cake_text=cake_text,
            shape=CustomCake.get_shape_dict().get(user_data.get("shape", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")),
            levels=levels,  
            topping=CustomCake.get_topping_dict().get(user_data.get("topping", "–ë–µ–∑ —Ç–æ–ø–ø–∏–Ω–≥–∞")),
            berries=CustomCake.get_berry_dict().get(user_data.get("berry", "–ë–µ–∑ —è–≥–æ–¥")),
            decor=CustomCake.get_decor_dict().get(user_data.get("decor", "none")),
            address=address,
            comment=comment,
            price=cake_price,
            telegram_id=message.from_user.username,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ sync_to_async
        await save_cake_order(custom_cake_order)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
        await send_order_notification(
            bot, message.from_user, cake_name, address, comment, cake_text
        )

        await message.answer(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {cake_name} - {cake_price} —Ä—É–±.\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {'–¢–µ–∫—Å—Ç –Ω–∞ —Ç–æ—Ä—Ç–µ: ' + cake_text if cake_text else '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏'}\n"
            f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
            f"üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: {comment}\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! üéÇ"
        )

    await state.clear()


@router.callback_query(F.data.startswith("shape_"))
async def shape_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã —Ç–æ—Ä—Ç–∞"""
    shape = callback.data.split("_")[1]
    shape_name = CustomCake.get_shape_dict().get(
        shape, shape
    )  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏

    await state.update_data(shape=shape)
    await state.set_state(CustomCakeState.waiting_for_topping)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º—É: {shape_name}. üéÇ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–Ω–≥ –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_topping_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("topping_"))
async def topping_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–æ–ø–∏–Ω–≥–∞"""
    topping = callback.data.split("_", 1)[1]
    topping_name = CustomCake.get_topping_dict().get(
        topping, topping
    )  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏

    await state.update_data(topping=topping)
    await state.set_state(CustomCakeState.waiting_for_berries)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–ø–∏–Ω–≥: {topping_name}. üç´\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —è–≥–æ–¥—ã –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_berries_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("berry_"))
async def berry_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–≥–æ–¥"""
    berry = callback.data.split("_")[1]
    berry_name = CustomCake.get_berry_dict().get(
        berry, berry
    )  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏

    await state.update_data(berry=berry)
    await state.set_state(CustomCakeState.waiting_for_decor)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–≥–æ–¥—É: {berry_name}. üçì\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä –¥–ª—è —Ç–æ—Ä—Ç–∞.",
        reply_markup=get_decor_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("decor_"))
async def decor_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–µ–∫–æ—Ä–∞"""
    decor = callback.data.split("_")[1]
    decor_name = CustomCake.get_decor_dict().get(
        decor, decor
    )  # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    await state.update_data(decor=decor)

    await state.set_state(CustomCakeState.waiting_for_text)

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–∫–æ—Ä: {decor_name}. üéâ\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞ —Ç–æ—Ä—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ –Ω–∞–¥–ø–∏—Å–∏)."
    )
    await callback.answer()


@router.message(CustomCakeState.waiting_for_text)
async def receive_cake_text(message: types.Message, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞."""

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç, —Ç–æ —É—Ä–æ–≤–µ–Ω—å –Ω—É–∂–µ–Ω
    selected_cake = data.get("selected_cake", "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç")

    # –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    if "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç" in selected_cake:
        level = data.get("level")

        if level is None:
            await message.answer(
                "–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä—Ç–∞ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            return

        level_name = dict(CustomCake.LEVEL_CHOICES).get(level, f"{level} —É—Ä–æ–≤–µ–Ω—å")

    else:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–æ—Ä—Ç, —É—Ä–æ–≤–Ω—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        level_name = None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞ —Ç–æ—Ä—Ç–µ
    cake_text = message.text.strip().lower()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–Ω–µ—Ç", —Ç–æ –Ω–∞–¥–ø–∏—Å—å –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π
    if cake_text == "–Ω–µ—Ç":
        cake_text = None

    await state.update_data(cake_text=cake_text)
    user_data = await state.get_data()

    # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
    if "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–æ—Ä—Ç" not in selected_cake:
        selected_cake_id = user_data.get("selected_cake_id")
        selected_cake_obj = await get_cake_by_id(selected_cake_id)

        if selected_cake_obj:
            total_price = selected_cake_obj.price
            result_message = (
                f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—Ä—Ç *{selected_cake_obj.name}*.\n\n"
                f"üñã –ù–∞–¥–ø–∏—Å—å: {cake_text or '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏'}\n"
                f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n\n"
                "üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

    # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
    else:
        levels= int(user_data.get("levels", 1)), # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —É—Ä–æ–≤–µ–Ω—å
        shape = user_data.get("shape", "round")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä—É–≥–ª—ã–π
        topping = user_data.get("topping", "none")
        berry = user_data.get("berry", "none")
        decor = user_data.get("decor", "none")

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–æ—Ä—Ç–∞
        custom_cake = CustomCake(
            levels=levels,
            shape=shape,
            topping=topping,
            berries=berry,
            decor=decor,
            cake_text=cake_text,
        )

        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        total_price = custom_cake.calculate_price()

        result_message = (
            "üéÇ *–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤!*\n\n"
            f"üìè –£—Ä–æ–≤–µ–Ω—å: {level_name}\n"
            f"üîµ –§–æ—Ä–º–∞: {CustomCake.get_shape_dict().get(shape, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üç´ –¢–æ–ø–ø–∏–Ω–≥: {CustomCake.get_topping_dict().get(topping, '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üçì –Ø–≥–æ–¥—ã: {CustomCake.get_berry_dict().get(berry, '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"‚ú® –î–µ–∫–æ—Ä: {CustomCake.get_decor_dict().get(decor, '–ë–µ–∑ –¥–µ–∫–æ—Ä–∞')}\n"
            f"üñã –ù–∞–¥–ø–∏—Å—å: {cake_text or '–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏'}\n"
            f"üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: {total_price} —Ä—É–±.\n\n"
            "üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )

    await message.answer(result_message, parse_mode="Markdown")
    await state.set_state(DeliveryState.waiting_for_address)


@router.message(DeliveryState.waiting_for_address)
async def receive_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    address = message.text
    await state.update_data(address=address)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'."
    )

    await state.set_state(DeliveryState.waiting_for_comment)
    